{"version":3,"sources":["components/Card/Card.js","components/Card/CardList.js","components/Card/SearchBox.js","components/UI/Scroll.js","components/CounterBtn/CounterBtn.js","components/Header/Header.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","console","log","map","robot","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CounterBtn","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","error","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","e","payload","target","value","fetch","then","res","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c6b49471.chunk.js","sourcesContent":["import React from 'react'\nimport 'tachyons';\n\nconst Card = ({ id, name, email }) => {\n\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?200x200`} alt={name} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card","import React from 'react'\nimport Card from \"./Card\";\n\n\nconst CardList = ({ robots }) => {\n    console.log('CardList Rendered');\n    return (\n        <>\n            {\n                robots.map((robot, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                })\n            }\n        </>\n    );\n}\n\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    console.log('SearchBox Rendered')\n    return (\n        <div className=\"pa2\">\n            <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder='Search Robots' onChange={searchChange} />\n        </div>\n    )\n}\n\nexport default SearchBox\n","import React from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '2px dashed black', height: '1000px' }}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll\n","import React, { Component } from 'react'\r\n\r\nclass CounterBtn extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n       if(this.state.count!== nextState.count) {\r\n           return true\r\n       }\r\n       return false\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {count: state.count + 1}\r\n        });\r\n    }\r\n\r\n    render() {\r\n        console.log(\"CounterBtn Rendered\")\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default CounterBtn;\r\n","import React, { Component } from 'react'\r\nimport CounterBtn from '../CounterBtn/CounterBtn'\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return false;\r\n    // }\r\n    render() {\r\n        console.log(\"Header Rendered\")\r\n        return (\r\n        <div>\r\n        <h1 className=\"f1\">RoboFriends Redux</h1>\r\n            <CounterBtn color={'red'}/>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport CardList from './components/Card/CardList'\nimport SearchBox from './components/Card/SearchBox'\nimport Scroll from './components/UI/Scroll.js'\n//import ErrorBoundary from './components/ErrorBoundary'\n\nimport { setSearchfield, requestRobots } from './actions';\nimport Header from './components/Header/Header'\n\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (e) => dispatch(setSearchfield(e.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending, error } = this.props;\n\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return isPending ?\n            <h1>Goofing around</h1> : (\n                <div className=\"tc\">\n                    <Header/>\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <CardList robots={filteredRobots} />\n                    </Scroll>\n                </div>\n            )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from './constants'\n\nexport const setSearchfield = (text) => {\n    //console.log(text);\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n}\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res => res.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from \"./constants\"\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    //console.log(action.type);\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD: return { ...state, searchField: action.payload }\n        default: return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING: return { ...state, isPending: true }\n        case REQUEST_ROBOTS_SUCCESS: return { ...state, robots: action.payload, isPending: false }\n        case REQUEST_ROBOTS_FAILED: return { ...state, error: action.payload, isPending: false }\n        default: return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}